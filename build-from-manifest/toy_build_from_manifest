#!/bin/bash -ex

env

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. "${SCRIPT_DIR}/../utilities/shell-utils.sh"

# Set and/or error-check build number. (This is the build number of the toy
# build we're setting up, not the build number of the historic build manifest.)
if [ ! -z "${BLD_NUM_ARG}" ]; then
    if [ ${BLD_NUM_ARG} -lt 30000 ]; then
        # Build numbers 30000-49999 are reserved for "upgrade" builds,
        # while 50000+ are for toys. Only mention the latter.
        echo "BLD_NUM_ARG must be greater than 50000 for toy builds!"
        exit 1
    else
        TOY_BLD_NUM=${BLD_NUM_ARG}
    fi
else
    # Default is 50000 + the Jenkins job build number
    TOY_BLD_NUM=$((BUILD_NUMBER + 50000))
fi

# Read possible Gerrit patches from environment
OPTS=""
if [[ -n $GERRIT_REVIEW_IDS ]]; then
    OPTS+="-r $GERRIT_REVIEW_IDS "
elif [[ -n $GERRIT_CHANGE_IDS ]]; then
    OPTS+="-g $GERRIT_CHANGE_IDS "
elif [[ -n $GERRIT_TOPICS ]]; then
    OPTS+="-t $GERRIT_TOPICS "
fi

# Two possible ways to be invoked: Standard toy build or Historic toy build.
# MANIFEST_REPO is the switch between the two.
if [[ -n $MANIFEST_REPO ]]; then
    # Standard toy build - we are syncing from the main 'manifest' repo,
    # or a fork of it, so it's reasonable to attempt applying any Gerrit
    # changes to the 'manifest' repo.

    chk_set MANIFEST_FILE

    # Sync to empty.xml first - guaranteed to exist
    MANIFEST_PARAMS="-u ${MANIFEST_REPO}"
    MANIFEST_PARAMS+=" -m python_tools/patch_via_gerrit/empty.xml"
    if [[ -n $MANIFEST_BRANCH ]]; then
        MANIFEST_PARAMS+=" -b ${MANIFEST_BRANCH}"
    fi

    rm -rf src
    mkdir src
    pushd src

    # Initial repo sync
    echo "Syncing manifest repo - empty manifest only"
    echo ================================
    repo init --no-repo-verify ${MANIFEST_PARAMS} -g all --reference=~/reporef
    repo sync --jobs=4 --quiet

    # Attempt to apply Gerrit changes to 'manifest' repo
    if [ ! -z "${OPTS}" ]; then
        echo "Applying manifest changes from Gerrit"
        echo ================================
        "${SCRIPT_DIR}/../utilities/patch_via_gerrit" \
            -d -c ${HOME}/.ssh/patch_via_gerrit.ini \
            ${OPTS} -s . --only-manifest
    fi

    # Now re-init and re-sync to the desired input manifest
    echo "Syncing to manifest file ${MANIFEST_FILE}"
    echo ================================
    repo init -m "${MANIFEST_FILE}" -g all --reference=~/reporef
    repo sync --jobs=24 --quiet
else
    # Historic toy build
    "${SCRIPT_DIR}/../utilities/sync_historic_manifest" \
        "${PRODUCT}" "${RELEASE}" "${VERSION}" "${BLD_NUM}" ./src

    pushd src
fi

# INVARIANT: We should be in the ${WORKSPACE}/src directory now

# Create build manifest for future reference. Do this before applying
# changes because the local cherry-picked SHAs won't make sense in the
# manifest.
repo manifest -r > manifest.xml

# Apply any changes from Gerrit - ignore any 'manifest' repo changes at
# this point; would have been done earlier if feasible
if [ ! -z "${OPTS}" ]; then
    echo "Applying changes from Gerrit"
    echo ================================
    "${SCRIPT_DIR}/../utilities/patch_via_gerrit" \
        -d -c ${HOME}/.ssh/patch_via_gerrit.ini \
        ${OPTS} -s . --ignore-manifest

    # QQQ patch_via_gerrit should probably parse all <copyfile> and
    # <linkfile> directives
    if [ -f tlm/CMakeLists.txt ]; then
        cp -f tlm/CMakeLists.txt CMakeLists.txt
    fi
fi

# Have to populate build.properties at the WORKSPACE level
popd

# Generate properties based on manifest - we can use repo's copy of the
# manifest repo
if [ ! -e build.properties ]; then
    echo "Creating properties files"
    echo =========================
    "${SCRIPT_DIR}/props-for-manifest" \
        -o build.properties \
        -d src/.repo/manifests \
        -b ${TOY_BLD_NUM} \
        ${MANIFEST_FILE}
fi

# Load a few useful params from the properties file.
eval $(sed -e 's/=\(.*\)/="\1"/' build.properties)

# Fail if the manifest attempts to use the 'module_projects' feature for
# handling git submodules. We can use repo's copy of the manifest
# repository. Would have been nice to check this earlier, but we had to
# wait until now to ensure PRODUCT_PATH is set. Also, this only makes
# sense if MANIFEST_FILE was set (ie, not a historic build), but the jq
# path below will return an empty string anyway if MANIFEST_FILE isn't
# set, so :shrug:
PRODUCT_CONFIG="src/.repo/manifests/${PRODUCT_PATH}/product-config.json"
if [ -e "${PRODUCT_CONFIG}" ]; then
    output=$(jq -r '.manifests."'${MANIFEST_FILE}'" | select(.module_projects != null) | .[]' "${PRODUCT_CONFIG}")
    if [ ! -z "${output}" ]; then
        set +x
        echo
        echo "============================================================="
        echo "ERROR: the product-config.json for ${MANIFEST_FILE}"
        echo "specifies 'module_projects'. toy-manifest-build is incompatible"
        echo "with this feature. Aborting."
        echo "============================================================="
        echo
        exit 5
    fi
fi

# Now save some additional stuff that toy build jobs might need
cat <<EOF >> build.properties
MANIFEST_REPO=${MANIFEST_REPO}
TOY_BLD_NUM=${TOY_BLD_NUM}
PATCH_VIA_GERRIT_OPTS=${OPTS}
EOF

# And stick the build-properties into git for remote toy builders
if [ ! -d toy-build-manifests ]; then
    git clone ssh://github.com/couchbasebuild/toy-build-manifests
fi
pushd toy-build-manifests
git fetch --all && git reset --hard origin/master
mkdir -p ${PRODUCT_PATH}/${RELEASE}
cp ../build.properties ${PRODUCT_PATH}/${RELEASE}/${VERSION}.properties
cp ../src/manifest.xml ${PRODUCT_PATH}/${RELEASE}/${VERSION}.xml
git add ${PRODUCT_PATH}/${RELEASE}
git commit --allow-empty \
    -m "${PRODUCT} ${RELEASE} build ${VERSION}-${TOY_BLD_NUM}" \
    -m "$(date)"
git push origin master
popd

# Back into the repo sync for remaining operations
pushd src

if [ "${KEEP_GIT}" = "True" ]; then
    exclude_git_arg=""
    set +x
    # As with build_from_manifest.py, we dereference symlinks in .git
    # directories so they work on Windows.
    echo "Dereferencing .git symlinks"
    echo =======================
    # Make a local temp file
    tempfile=./tmpgitfile
    find . -type l -path '*/.git/*' -print0 | while read -rd $'\0' file; do
        cp -aL "${file}" ${tempfile}
        rm "${file}"
        mv ${tempfile} "${file}"
    done
    set -x
else
    exclude_git_arg="--exclude .repo --exclude-vcs"
fi

echo "Creating source tarball"
echo =======================
tar --create --file ../source.tar.gz --gzip ${exclude_git_arg} .[A-z]* *

# Create final deliverables at WORKSPACE level
popd

cp src/manifest.xml manifest.xml

# Create build-specifically-named versions of the artifacts
# QQQ Not *entirely* sure why we need both of these prefixes
VER_PREFIX="${PROD_NAME}-${VERSION}-${TOY_BLD_NUM}"
REL_PREFIX="${PROD_NAME}-${RELEASE}-${TOY_BLD_NUM}"
mv source.tar.gz ${VER_PREFIX}-source.tar.gz
mv manifest.xml ${VER_PREFIX}-manifest.xml
# Need to keep original build.properties so Jenkins job can inject it,
# so use cp rather than mv
cp build.properties ${REL_PREFIX}.properties

# Create trigger.properties if TRIGGER_BUILD is true
if [ "${TRIGGER_BUILD}" = "true" ]; then
    echo "TOY_BUILD=true" > trigger.properties
fi

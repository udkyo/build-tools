name: Restricted Branch Check

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number'
        required: true
        type: string
      pr_title:
        description: 'PR title for ticket extraction'
        required: true
        type: string
    secrets:
      JIRA_URL: { required: true }
      JIRA_USERNAME: { required: true }
      JIRA_API_TOKEN: { required: true }
    outputs:
      check_status:
        description: 'Status of the restricted branch check'
        value: ${{ jobs.restricted-branch-check.outputs.status }}

jobs:
  restricted-branch-check:
    name: Check Branch Restrictions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      status: ${{ steps.final-status.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # Step 1: Sanitize inputs for shell safety
      - name: Sanitize inputs
        id: sanitize-inputs
        run: |
          # Function to sanitize strings used in shell commands
          sanitize_input() {
            local input="$1"
            # Replace or escape characters that could lead to command injection, but preserve quotes
            echo "$input" | sed 's/[`$()&|<>]//g' | tr -d '\r\n'
          }

          # Sanitize the PR title for shell safety
          PR_TITLE_SAFE=$(sanitize_input "${{ inputs.pr_title }}")
          echo "pr_title_safe=$PR_TITLE_SAFE" >> $GITHUB_OUTPUT

      # Step 2: Validate inputs
      - name: Validate inputs
        id: validate-inputs
        uses: udkyo/build-tools/.github/actions/restricted-branch-check/01-validate-inputs@gha-restriction-checker
        with:
          pr_number: ${{ inputs.pr_number }}
          pr_title: ${{ steps.sanitize-inputs.outputs.pr_title_safe }}
          base_ref: ${{ github.base_ref }}

      # Step 3: Validate repository organization
      - name: Validate organization
        id: validate-org
        uses: udkyo/build-tools/.github/actions/restricted-branch-check/02-validate-organization@gha-restriction-checker
        with:
          repository: ${{ github.repository }}

      # Step 4: Setup environment (checkout repos, install tools)
      - name: Setup environment
        id: setup-env
        if: steps.validate-inputs.outputs.status == 'valid' && steps.validate-org.outputs.status == 'org_validated'
        uses: udkyo/build-tools/.github/actions/restricted-branch-check/03-setup-environment@gha-restriction-checker
        with:
          jira_url: ${{ secrets.JIRA_URL }}
          jira_username: ${{ secrets.JIRA_USERNAME }}
          jira_api_token: ${{ secrets.JIRA_API_TOKEN }}

      # Step 5: Validate paths
      - name: Validate paths
        id: validate-paths
        if: steps.validate-inputs.outputs.status == 'valid' && steps.validate-org.outputs.status == 'org_validated' && steps.setup-env.outputs.status == 'success'
        run: |
          # Function to validate path safety
          validate_path() {
            local path="$1"
            # Check for directory traversal attempts
            if [[ "$path" == *".."* ]] || [[ "$path" != "build-tools"* ]]; then
              return 1
            fi
            return 0
          }

          # Validate the build tools path
          if ! validate_path "build-tools"; then
            echo "::error::Invalid build tools path detected: possible path traversal attempt"
            echo "status=path_validation_failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate GitHub output path if present
          if [[ -n "$GITHUB_OUTPUT" ]]; then
            if [[ ! -f "$GITHUB_OUTPUT" ]]; then
              echo "::warning::GITHUB_OUTPUT does not exist or is not a file"
            elif [[ ! -w "$GITHUB_OUTPUT" ]]; then
              echo "::error::GITHUB_OUTPUT is not writable"
              echo "status=output_validation_failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "status=paths_validated" >> $GITHUB_OUTPUT

      # Step 6: Run the restriction check
      - name: Run restriction check
        id: run-check
        if: steps.validate-inputs.outputs.status == 'valid' && steps.validate-org.outputs.status == 'org_validated' && steps.setup-env.outputs.status == 'success' && steps.validate-paths.outputs.status == 'paths_validated'
        uses: udkyo/build-tools/.github/actions/restricted-branch-check/04-run-restriction-check@gha-restriction-checker
        with:
          base_ref: ${{ github.base_ref }}
          repository: ${{ github.repository }}
          pr_number: ${{ inputs.pr_number }}
          pr_title: ${{ steps.sanitize-inputs.outputs.pr_title_safe }}
          jira_url: ${{ secrets.JIRA_URL }}
          jira_username: ${{ secrets.JIRA_USERNAME }}
          jira_api_token: ${{ secrets.JIRA_API_TOKEN }}

      # Step 7: Prepare error information
      - name: Prepare error information
        if: always()
        id: prepare-errors
        run: |
          # Function to sanitize error messages for safe display
          sanitize_error_message() {
            local message="$1"

            # Remove actual credentials if they appear in error messages
            if [[ -n "$message" ]]; then
              # Redact JIRA API token if it appears in error message
              if [[ -n "${{ secrets.JIRA_API_TOKEN }}" ]]; then
                message=$(echo "$message" | sed "s/${{ secrets.JIRA_API_TOKEN }}/[REDACTED_API_TOKEN]/g")
              fi

              # Redact JIRA username if it appears in error message
              if [[ -n "${{ secrets.JIRA_USERNAME }}" ]]; then
                message=$(echo "$message" | sed "s/${{ secrets.JIRA_USERNAME }}/[REDACTED_USERNAME]/g")
              fi

              # Replace URL connection error messages with a generic message
              if [[ "$message" == *"Unable to connect to"* || "$message" == *"connection failed"* ]]; then
                message="JIRA connection failed. Please verify your JIRA credentials and network connectivity."
              fi

              # Redact Basic Auth headers (commonly found in error responses)
              message=$(echo "$message" | sed -E 's/Authorization: Basic [A-Za-z0-9+\/=]*/Authorization: Basic [REDACTED]/g')
              message=$(echo "$message" | sed -E 's/Authorization: Bearer [A-Za-z0-9_\.\-]*/Authorization: Bearer [REDACTED]/g')

              # Look for typical base64 patterns that might be credentials (30-100 chars)
              message=$(echo "$message" | sed -E 's/([A-Za-z0-9+\/=]{30,100})/[POSSIBLE_ENCODED_CREDENTIALS]/g')

              # Limit length to prevent log flooding
              if [[ ${#message} -gt 200 ]]; then
                message="${message:0:197}..."
              fi
            fi

            echo "$message"
          }

          # Initialize with empty values
          ERROR_MESSAGE=""
          ERROR_TYPE=""

          # Check each step in sequence of priority
          if [[ "${{ steps.validate-inputs.outputs.status }}" != "valid" ]]; then
            ERROR_MESSAGE="${{ steps.validate-inputs.outputs.error_message }}"
            ERROR_TYPE="input_validation_error"
          elif [[ "${{ steps.validate-org.outputs.status }}" != "org_validated" ]]; then
            ERROR_MESSAGE="${{ steps.validate-org.outputs.error_message }}"
            ERROR_TYPE="${{ steps.validate-org.outputs.error_type }}"
          elif [[ "${{ steps.validate-paths.outputs.status }}" != "paths_validated" ]]; then
            ERROR_MESSAGE="Path validation failed: Possible security issue detected"
            ERROR_TYPE="path_validation_error"
          elif [[ "${{ steps.setup-env.outputs.status }}" != "success" ]]; then
            ERROR_MESSAGE="${{ steps.setup-env.outputs.error_message }}"
            ERROR_TYPE="setup_error"
          elif [[ "${{ steps.run-check.outputs.status }}" == "error" ]]; then
            ERROR_MESSAGE="${{ steps.run-check.outputs.error_message }}"
            ERROR_TYPE="${{ steps.run-check.outputs.error_type }}"

            # Enhanced error classification for improved troubleshooting
            if [[ -z "$ERROR_TYPE" || "$ERROR_TYPE" == "general" ]]; then
              if [[ "$ERROR_MESSAGE" == *"connection refused"* || "$ERROR_MESSAGE" == *"network"* ]]; then
                ERROR_TYPE="network_connection_failure"
              elif [[ "$ERROR_MESSAGE" == *"timeout"* ]]; then
                ERROR_TYPE="request_timeout"
              elif [[ "$ERROR_MESSAGE" == *"permission"* ]]; then
                ERROR_TYPE="permission_error"
              elif [[ "$ERROR_MESSAGE" == *"not found"* ]]; then
                ERROR_TYPE="resource_not_found"
              else
                ERROR_TYPE="unexpected_error"
                echo "::debug::Full error context: $ERROR_MESSAGE"
              fi
            fi
          fi

          # Sanitize error message before output
          if [[ -n "$ERROR_MESSAGE" ]]; then
            ERROR_MESSAGE=$(sanitize_error_message "$ERROR_MESSAGE")
          fi

          # Check for valid GITHUB_OUTPUT before writing
          if [[ -n "$GITHUB_OUTPUT" && -f "$GITHUB_OUTPUT" && -w "$GITHUB_OUTPUT" ]]; then
            echo "error_message=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
            echo "error_type=$ERROR_TYPE" >> $GITHUB_OUTPUT
          else
            echo "::error::Cannot write to GITHUB_OUTPUT"
          fi

      # Step 8: Generate summary of results
      - name: Generate summary
        if: always()
        id: generate-summary
        uses: udkyo/build-tools/.github/actions/restricted-branch-check/05-generate-summary@gha-restriction-checker
        with:
          # Status input
          status: ${{ steps.run-check.outputs.status || 'error' }}

          # Error information (simplified)
          error_message: ${{ steps.prepare-errors.outputs.error_message }}
          error_type: ${{ steps.prepare-errors.outputs.error_type }}

          # Restriction details
          restriction_reason: ${{ steps.run-check.outputs.restriction_reason }}
          restriction_release: ${{ steps.run-check.outputs.restriction_release }}
          restriction_approval_ticket: ${{ steps.run-check.outputs.restriction_approval_ticket }}
          restriction_type: ${{ steps.run-check.outputs.restriction_type }}

          # Success details
          check_result: ${{ steps.run-check.outputs.check_result }}
          checked_manifests: ${{ steps.run-check.outputs.checked_manifests }}
          checked_project: ${{ steps.run-check.outputs.checked_project }}
          checked_branch: ${{ steps.run-check.outputs.checked_branch }}

      # Step 9: Set final status
      - name: Set final status
        if: always()
        id: final-status
        run: |
          if [[ "${{ steps.validate-inputs.outputs.status }}" != "valid" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Input validation failed"
            exit 1
          elif [[ "${{ steps.validate-org.outputs.status }}" != "org_validated" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Organization validation failed"
            exit 1
          elif [[ "${{ steps.validate-paths.outputs.status }}" != "paths_validated" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Path validation failed"
            exit 1
          elif [[ "${{ steps.setup-env.outputs.status }}" != "success" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Environment setup failed"
            exit 1
          elif [[ "${{ steps.run-check.outputs.status }}" == "restriction" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Branch restriction applies"
            exit 1
          elif [[ "${{ steps.run-check.outputs.status }}" == "error" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Technical error occurred"
            exit 1
          elif [[ "${{ steps.run-check.outputs.status }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "::notice::Branch check passed successfully"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Unexpected workflow status"
            exit 1
          fi

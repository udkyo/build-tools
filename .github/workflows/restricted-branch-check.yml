name: Restricted Branch Check

on:
  workflow_call:
    inputs:
      head_repo:
        description: 'PR head repo'
        required: true
        type: string
      pr_number:
        description: 'PR number'
        required: true
        type: string
    secrets:
      JIRA_URL: { required: true }
      JIRA_USERNAME: { required: true }
      JIRA_API_TOKEN: { required: true }
    outputs:
      check_status:
        description: 'Status of the restricted branch check'
        value: ${{ jobs.restricted-branch-check.outputs.status }}

jobs:
  restricted-branch-check:
    name: Check Branch Restrictions
    runs-on: ubuntu-latest
    env:
      ALLOWED_ORGS: "udkyo couchbase couchbasedeps couchbaselabs"
    permissions:
      contents: read
      pull-requests: read
    outputs:
      status: ${{ steps.final-status.outputs.status }}
    steps:
      - name: Validate inputs
        run: |
          # Validate head_repo length
          REPO_INPUT="${{ inputs.head_repo }}"
          if [[ ${#REPO_INPUT} -gt 100 ]]; then
            echo "::error::Repository name too long (max 100 characters)"
            exit 1
          fi

          # Validate repo name - org cannot contain dots/underscores, repo more restrictive
          if [[ ! "$REPO_INPUT" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,38}[a-zA-Z0-9])?/[a-zA-Z0-9]([a-zA-Z0-9._-]{0,98}[a-zA-Z0-9])?$ ]]; then
            echo "::error::Invalid repository format"
            echo "Repository must be in format 'org/repo' with safe characters only"
            echo "Organization: alphanumeric and hyphens only, 2-40 chars"
            echo "Repository: alphanumeric, dots, underscores, hyphens only, 2-100 chars"
            exit 1
          fi

          # Validate PR number is numeric
          PR_INPUT="${{ inputs.pr_number }}"
          if [[ ! "$PR_INPUT" =~ ^[0-9]+$ ]]; then
            echo "::error::PR number must be numeric only"
            exit 1
          fi

          # Bound check PR number
          if (( PR_INPUT <= 0 || PR_INPUT > 50000 )); then
            echo "::error::PR number out of reasonable range (1-50000)"
            exit 1
          fi

          # Check base ref length
          BASE_REF="${{ github.base_ref }}"
          if [[ ${#BASE_REF} -gt 100 ]]; then
            echo "::error::Base ref too long (max 100 characters)"
            exit 1
          fi

          # Branch name validation
          if [[ ! "$BASE_REF" =~ ^[a-zA-Z0-9]([a-zA-Z0-9._/-]{0,98}[a-zA-Z0-9])?$ ]] || \
             [[ "$BASE_REF" =~ (\.\.|//|\$|\`|\\|\'|\"|;|\||\&|\<|\>|\(|\)|\[|\]|\{|\}|\*|\?|\~) ]]; then
            echo "::error::Invalid base ref format"
            echo "Base ref must be a valid branch name (alphanumeric, dots, underscores, hyphens, slashes only)"
            echo "No path traversal sequences or shell metacharacters allowed"
            exit 1
          fi

          # Check branch name for common dangerous patterns
          if [[ "$BASE_REF" == *".."* ]] || [[ "$BASE_REF" == *"//"* ]] || [[ "$BASE_REF" == "."* ]] || [[ "$BASE_REF" == *"~"* ]]; then
            echo "::error::Base ref contains dangerous patterns"
            exit 1
          fi

      - name: Validate target repository organization
        run: |
          # Validate the target repository organization
          target_org=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          if [[ ! " $ALLOWED_ORGS " =~ " $target_org " ]]; then
            echo "::error::Target repository organization '$target_org' is not in the allowlist"
            echo "This workflow can only be used for repositories in allowed organizations: $ALLOWED_ORGS"
            echo "::notice::SECURITY_AUDIT: Unauthorized target repository access attempt: $target_org"
            exit 1
          fi
          echo "::notice::SECURITY_AUDIT: Target repository organization validation passed: $target_org"
          echo "::notice::Repository validation: Protecting ${{ github.repository }} (source: ${{ inputs.head_repo }})"

      - name: Validate environment setup
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          # Validate secrets
          validation_failed=false

          if [[ -z "$JIRA_URL" ]]; then
            echo "::error::JIRA_URL secret is required but not provided"
            validation_failed=true
          fi

          if [[ -z "$JIRA_USERNAME" ]]; then
            echo "::error::JIRA_USERNAME secret is required but not provided"
            validation_failed=true
          fi

          if [[ -z "$JIRA_API_TOKEN" ]]; then
            echo "::error::JIRA_API_TOKEN secret is required but not provided"
            validation_failed=true
          fi

          # Additional validation: check secret format without exposing values
          if [[ -n "$JIRA_URL" ]] && [[ ! "$JIRA_URL" =~ ^https?:// ]]; then
            echo "::error::JIRA_URL must be a valid HTTP/HTTPS URL"
            validation_failed=true
          fi

          if [[ -n "$JIRA_USERNAME" ]] && [[ ${#JIRA_USERNAME} -lt 1 || ${#JIRA_USERNAME} -gt 100 ]]; then
            echo "::error::JIRA_USERNAME must be between 1-100 characters"
            validation_failed=true
          fi

          if [[ -n "$JIRA_API_TOKEN" ]] && [[ ${#JIRA_API_TOKEN} -lt 10 || ${#JIRA_API_TOKEN} -gt 200 ]]; then
            echo "::error::JIRA_API_TOKEN length is invalid"
            validation_failed=true
          fi

          if [[ "$validation_failed" == "true" ]]; then
            echo "::error::Environment validation failed - check secrets configuration"
            exit 1
          fi

          echo "::notice::Environment validation passed - all secrets are properly configured"

      - name: Verify repository accessibility
        env:
          REPO_NAME: ${{ inputs.head_repo }}
        run: |
          echo "::notice::SECURITY_AUDIT: Verifying repository accessibility"

          # Additional security validation for repository name
          if [[ "$REPO_NAME" =~ [[:space:]] ]]; then
            echo "::error::Repository name contains invalid whitespace characters"
            exit 1
          fi

          # Verify repository exists and is accessible with timeout
          echo "::debug::Attempting to verify repository access (with 30s timeout)"
          if ! timeout 30s git ls-remote --exit-code --heads "https://github.com/${REPO_NAME}" > /dev/null 2>&1; then
            echo "::error::Cannot access repository or repository does not exist"
            echo "::notice::SECURITY_AUDIT: Repository access failed"
            exit 1
          fi
          echo "::notice::SECURITY_AUDIT: Repository access verified successfully"

      - name: Checkout build-tools repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          repository: udkyo/build-tools
          ref: gha-restriction-checker
          path: build-tools
          fetch-depth: 1

      - name: Checkout manifest repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          repository: couchbase/manifest
          ref: master
          path: manifest
          fetch-depth: 1

      - name: Install uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba
        with:
          version: latest

      - name: Run restriction checker
        id: branch-check
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ inputs.pr_number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          echo "::notice::RESTRICTION_CHECK: Starting restriction check for target=${{ github.repository }} pr=${{ inputs.pr_number }} base_ref=${{ github.base_ref }} (source: ${{ inputs.head_repo }})"

          # Secure validation of environment variables without exposing sensitive values
          validation_failed=false

          # Validate non-sensitive variables
          if [[ -z "$GITHUB_BASE_REF" ]]; then
            echo "::error::GITHUB_BASE_REF environment variable is not set"
            validation_failed=true
          fi

          if [[ -z "$GITHUB_REPOSITORY" ]]; then
            echo "::error::GITHUB_REPOSITORY environment variable is not set"
            validation_failed=true
          fi

          if [[ -z "$PR_NUMBER" ]]; then
            echo "::error::PR_NUMBER environment variable is not set"
            validation_failed=true
          fi

          # Validate sensitive variables exist without exposing values
          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "::error::GITHUB_TOKEN is not available"
            validation_failed=true
          fi

          if [[ -z "$JIRA_URL" ]]; then
            echo "::error::JIRA_URL is not available"
            validation_failed=true
          fi

          if [[ -z "$JIRA_USERNAME" ]]; then
            echo "::error::JIRA_USERNAME is not available"
            validation_failed=true
          fi

          if [[ -z "$JIRA_API_TOKEN" ]]; then
            echo "::error::JIRA_API_TOKEN is not available"
            validation_failed=true
          fi

          if [[ "$validation_failed" == "true" ]]; then
            echo "::error::Environment validation failed - required variables missing"
            exit 1
          fi

          echo "::notice::All required environment variables are properly configured"

          (cd build-tools/restriction && uv run restricted-branch-check && (echo "status=success" >> $GITHUB_OUTPUT)) || {
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::notice::RESTRICTION_ENFORCEMENT: PR blocked due to restriction policy for target=${{ github.repository }} pr=${{ inputs.pr_number }}"
            exit 1
          }
          echo "::notice::RESTRICTION_CHECK: Completed successfully - no restrictions apply for target=${{ github.repository }} pr=${{ inputs.pr_number }}"

      - name: Set final status
        if: always()
        id: final-status
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "::notice::WORKFLOW_STATUS: Restriction check passed for target=${{ github.repository }} pr=${{ inputs.pr_number }}"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::notice::WORKFLOW_STATUS: Restriction check failed for target=${{ github.repository }} pr=${{ inputs.pr_number }}"
          fi

      - name: Generate summary
        if: always()
        run: |
          if [[ "${{ steps.final-status.outputs.status }}" == "failure" ]]; then
            echo "## ❌ Restricted Branch Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "This PR cannot be merged until all the restricted branch requirements are met or the workflow is fixed." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Restricted Branch Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "All required approvals are in place for the target branch." >> $GITHUB_STEP_SUMMARY
          fi
